# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mmcBody', [dirname(__file__)])
        except ImportError:
            import _mmcBody
            return _mmcBody
        if fp is not None:
            try:
                _mod = imp.load_module('_mmcBody', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mmcBody = swig_import_helper()
    del swig_import_helper
else:
    import _mmcBody
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mmcBody.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _mmcBody.SwigPyIterator_value(self)
    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _mmcBody.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _mmcBody.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _mmcBody.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _mmcBody.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _mmcBody.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _mmcBody.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _mmcBody.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _mmcBody.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _mmcBody.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _mmcBody.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _mmcBody.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _mmcBody.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _mmcBody.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _mmcBody.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _mmcBody.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mmcBody.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _mmcBody.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _mmcBody.DoubleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _mmcBody.DoubleVector___bool__(self)
    def __len__(self) -> "std::vector< double >::size_type" : return _mmcBody.DoubleVector___len__(self)
    def pop(self) -> "std::vector< double >::value_type" : return _mmcBody.DoubleVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< double,std::allocator< double > > *" : return _mmcBody.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _mmcBody.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _mmcBody.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _mmcBody.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< double >::value_type const &" : return _mmcBody.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _mmcBody.DoubleVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _mmcBody.DoubleVector_append(self, *args)
    def empty(self) -> "bool" : return _mmcBody.DoubleVector_empty(self)
    def size(self) -> "std::vector< double >::size_type" : return _mmcBody.DoubleVector_size(self)
    def clear(self) -> "void" : return _mmcBody.DoubleVector_clear(self)
    def swap(self, *args) -> "void" : return _mmcBody.DoubleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< double >::allocator_type" : return _mmcBody.DoubleVector_get_allocator(self)
    def begin(self) -> "std::vector< double >::iterator" : return _mmcBody.DoubleVector_begin(self)
    def end(self) -> "std::vector< double >::iterator" : return _mmcBody.DoubleVector_end(self)
    def rbegin(self) -> "std::vector< double >::reverse_iterator" : return _mmcBody.DoubleVector_rbegin(self)
    def rend(self) -> "std::vector< double >::reverse_iterator" : return _mmcBody.DoubleVector_rend(self)
    def pop_back(self) -> "void" : return _mmcBody.DoubleVector_pop_back(self)
    def erase(self, *args) -> "std::vector< double >::iterator" : return _mmcBody.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _mmcBody.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _mmcBody.DoubleVector_push_back(self, *args)
    def front(self) -> "std::vector< double >::value_type const &" : return _mmcBody.DoubleVector_front(self)
    def back(self) -> "std::vector< double >::value_type const &" : return _mmcBody.DoubleVector_back(self)
    def assign(self, *args) -> "void" : return _mmcBody.DoubleVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _mmcBody.DoubleVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _mmcBody.DoubleVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _mmcBody.DoubleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< double >::size_type" : return _mmcBody.DoubleVector_capacity(self)
    __swig_destroy__ = _mmcBody.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _mmcBody.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _mmcBody.DoubleVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _mmcBody.DoubleVectorVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _mmcBody.DoubleVectorVector___bool__(self)
    def __len__(self) -> "std::vector< std::vector< double > >::size_type" : return _mmcBody.DoubleVectorVector___len__(self)
    def pop(self) -> "std::vector< std::vector< double > >::value_type" : return _mmcBody.DoubleVectorVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *" : return _mmcBody.DoubleVectorVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _mmcBody.DoubleVectorVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _mmcBody.DoubleVectorVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _mmcBody.DoubleVectorVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &" : return _mmcBody.DoubleVectorVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _mmcBody.DoubleVectorVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_append(self, *args)
    def empty(self) -> "bool" : return _mmcBody.DoubleVectorVector_empty(self)
    def size(self) -> "std::vector< std::vector< double > >::size_type" : return _mmcBody.DoubleVectorVector_size(self)
    def clear(self) -> "void" : return _mmcBody.DoubleVectorVector_clear(self)
    def swap(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type" : return _mmcBody.DoubleVectorVector_get_allocator(self)
    def begin(self) -> "std::vector< std::vector< double > >::iterator" : return _mmcBody.DoubleVectorVector_begin(self)
    def end(self) -> "std::vector< std::vector< double > >::iterator" : return _mmcBody.DoubleVectorVector_end(self)
    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator" : return _mmcBody.DoubleVectorVector_rbegin(self)
    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator" : return _mmcBody.DoubleVectorVector_rend(self)
    def pop_back(self) -> "void" : return _mmcBody.DoubleVectorVector_pop_back(self)
    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator" : return _mmcBody.DoubleVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _mmcBody.new_DoubleVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_push_back(self, *args)
    def front(self) -> "std::vector< std::vector< double > >::value_type const &" : return _mmcBody.DoubleVectorVector_front(self)
    def back(self) -> "std::vector< std::vector< double > >::value_type const &" : return _mmcBody.DoubleVectorVector_back(self)
    def assign(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _mmcBody.DoubleVectorVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::vector< double > >::size_type" : return _mmcBody.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _mmcBody.delete_DoubleVectorVector
    __del__ = lambda self : None;
DoubleVectorVector_swigregister = _mmcBody.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class LEG_VECTORS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LEG_VECTORS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LEG_VECTORS, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mmcBody.new_LEG_VECTORS()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["front_vect"] = _mmcBody.LEG_VECTORS_front_vect_set
    __swig_getmethods__["front_vect"] = _mmcBody.LEG_VECTORS_front_vect_get
    if _newclass:front_vect = _swig_property(_mmcBody.LEG_VECTORS_front_vect_get, _mmcBody.LEG_VECTORS_front_vect_set)
    __swig_setmethods__["leg_vect"] = _mmcBody.LEG_VECTORS_leg_vect_set
    __swig_getmethods__["leg_vect"] = _mmcBody.LEG_VECTORS_leg_vect_get
    if _newclass:leg_vect = _swig_property(_mmcBody.LEG_VECTORS_leg_vect_get, _mmcBody.LEG_VECTORS_leg_vect_set)
    __swig_setmethods__["segm_leg_ant_vect"] = _mmcBody.LEG_VECTORS_segm_leg_ant_vect_set
    __swig_getmethods__["segm_leg_ant_vect"] = _mmcBody.LEG_VECTORS_segm_leg_ant_vect_get
    if _newclass:segm_leg_ant_vect = _swig_property(_mmcBody.LEG_VECTORS_segm_leg_ant_vect_get, _mmcBody.LEG_VECTORS_segm_leg_ant_vect_set)
    __swig_setmethods__["segm_leg_ant_norm"] = _mmcBody.LEG_VECTORS_segm_leg_ant_norm_set
    __swig_getmethods__["segm_leg_ant_norm"] = _mmcBody.LEG_VECTORS_segm_leg_ant_norm_get
    if _newclass:segm_leg_ant_norm = _swig_property(_mmcBody.LEG_VECTORS_segm_leg_ant_norm_get, _mmcBody.LEG_VECTORS_segm_leg_ant_norm_set)
    __swig_setmethods__["segm_leg_post_vect"] = _mmcBody.LEG_VECTORS_segm_leg_post_vect_set
    __swig_getmethods__["segm_leg_post_vect"] = _mmcBody.LEG_VECTORS_segm_leg_post_vect_get
    if _newclass:segm_leg_post_vect = _swig_property(_mmcBody.LEG_VECTORS_segm_leg_post_vect_get, _mmcBody.LEG_VECTORS_segm_leg_post_vect_set)
    __swig_setmethods__["segm_leg_post_norm"] = _mmcBody.LEG_VECTORS_segm_leg_post_norm_set
    __swig_getmethods__["segm_leg_post_norm"] = _mmcBody.LEG_VECTORS_segm_leg_post_norm_get
    if _newclass:segm_leg_post_norm = _swig_property(_mmcBody.LEG_VECTORS_segm_leg_post_norm_get, _mmcBody.LEG_VECTORS_segm_leg_post_norm_set)
    __swig_setmethods__["foot_global"] = _mmcBody.LEG_VECTORS_foot_global_set
    __swig_getmethods__["foot_global"] = _mmcBody.LEG_VECTORS_foot_global_get
    if _newclass:foot_global = _swig_property(_mmcBody.LEG_VECTORS_foot_global_get, _mmcBody.LEG_VECTORS_foot_global_set)
    __swig_setmethods__["gc"] = _mmcBody.LEG_VECTORS_gc_set
    __swig_getmethods__["gc"] = _mmcBody.LEG_VECTORS_gc_get
    if _newclass:gc = _swig_property(_mmcBody.LEG_VECTORS_gc_get, _mmcBody.LEG_VECTORS_gc_set)
    __swig_destroy__ = _mmcBody.delete_LEG_VECTORS
    __del__ = lambda self : None;
LEG_VECTORS_swigregister = _mmcBody.LEG_VECTORS_swigregister
LEG_VECTORS_swigregister(LEG_VECTORS)

class SEGM_VECTORS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEGM_VECTORS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEGM_VECTORS, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mmcBody.new_SEGM_VECTORS()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["diag_to_right_vect"] = _mmcBody.SEGM_VECTORS_diag_to_right_vect_set
    __swig_getmethods__["diag_to_right_vect"] = _mmcBody.SEGM_VECTORS_diag_to_right_vect_get
    if _newclass:diag_to_right_vect = _swig_property(_mmcBody.SEGM_VECTORS_diag_to_right_vect_get, _mmcBody.SEGM_VECTORS_diag_to_right_vect_set)
    __swig_setmethods__["diag_to_right_norm"] = _mmcBody.SEGM_VECTORS_diag_to_right_norm_set
    __swig_getmethods__["diag_to_right_norm"] = _mmcBody.SEGM_VECTORS_diag_to_right_norm_get
    if _newclass:diag_to_right_norm = _swig_property(_mmcBody.SEGM_VECTORS_diag_to_right_norm_get, _mmcBody.SEGM_VECTORS_diag_to_right_norm_set)
    __swig_setmethods__["post_to_ant_vect"] = _mmcBody.SEGM_VECTORS_post_to_ant_vect_set
    __swig_getmethods__["post_to_ant_vect"] = _mmcBody.SEGM_VECTORS_post_to_ant_vect_get
    if _newclass:post_to_ant_vect = _swig_property(_mmcBody.SEGM_VECTORS_post_to_ant_vect_get, _mmcBody.SEGM_VECTORS_post_to_ant_vect_set)
    __swig_setmethods__["post_to_ant_norm"] = _mmcBody.SEGM_VECTORS_post_to_ant_norm_set
    __swig_getmethods__["post_to_ant_norm"] = _mmcBody.SEGM_VECTORS_post_to_ant_norm_get
    if _newclass:post_to_ant_norm = _swig_property(_mmcBody.SEGM_VECTORS_post_to_ant_norm_get, _mmcBody.SEGM_VECTORS_post_to_ant_norm_set)
    __swig_setmethods__["delta_front"] = _mmcBody.SEGM_VECTORS_delta_front_set
    __swig_getmethods__["delta_front"] = _mmcBody.SEGM_VECTORS_delta_front_get
    if _newclass:delta_front = _swig_property(_mmcBody.SEGM_VECTORS_delta_front_get, _mmcBody.SEGM_VECTORS_delta_front_set)
    __swig_setmethods__["delta_back"] = _mmcBody.SEGM_VECTORS_delta_back_set
    __swig_getmethods__["delta_back"] = _mmcBody.SEGM_VECTORS_delta_back_get
    if _newclass:delta_back = _swig_property(_mmcBody.SEGM_VECTORS_delta_back_get, _mmcBody.SEGM_VECTORS_delta_back_set)
    __swig_destroy__ = _mmcBody.delete_SEGM_VECTORS
    __del__ = lambda self : None;
SEGM_VECTORS_swigregister = _mmcBody.SEGM_VECTORS_swigregister
SEGM_VECTORS_swigregister(SEGM_VECTORS)

class MmcBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MmcBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MmcBody, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmcBody.new_MmcBody(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmcBody.delete_MmcBody
    __del__ = lambda self : None;
    __swig_setmethods__["legs"] = _mmcBody.MmcBody_legs_set
    __swig_getmethods__["legs"] = _mmcBody.MmcBody_legs_get
    if _newclass:legs = _swig_property(_mmcBody.MmcBody_legs_get, _mmcBody.MmcBody_legs_set)
    __swig_setmethods__["segms"] = _mmcBody.MmcBody_segms_set
    __swig_getmethods__["segms"] = _mmcBody.MmcBody_segms_get
    if _newclass:segms = _swig_property(_mmcBody.MmcBody_segms_get, _mmcBody.MmcBody_segms_set)
    __swig_setmethods__["temp_legs"] = _mmcBody.MmcBody_temp_legs_set
    __swig_getmethods__["temp_legs"] = _mmcBody.MmcBody_temp_legs_get
    if _newclass:temp_legs = _swig_property(_mmcBody.MmcBody_temp_legs_get, _mmcBody.MmcBody_temp_legs_set)
    __swig_setmethods__["temp_segms"] = _mmcBody.MmcBody_temp_segms_set
    __swig_getmethods__["temp_segms"] = _mmcBody.MmcBody_temp_segms_get
    if _newclass:temp_segms = _swig_property(_mmcBody.MmcBody_temp_segms_get, _mmcBody.MmcBody_temp_segms_set)
    __swig_setmethods__["segm1_in_global"] = _mmcBody.MmcBody_segm1_in_global_set
    __swig_getmethods__["segm1_in_global"] = _mmcBody.MmcBody_segm1_in_global_get
    if _newclass:segm1_in_global = _swig_property(_mmcBody.MmcBody_segm1_in_global_get, _mmcBody.MmcBody_segm1_in_global_set)
    __swig_setmethods__["foot_diag"] = _mmcBody.MmcBody_foot_diag_set
    __swig_getmethods__["foot_diag"] = _mmcBody.MmcBody_foot_diag_get
    if _newclass:foot_diag = _swig_property(_mmcBody.MmcBody_foot_diag_get, _mmcBody.MmcBody_foot_diag_set)
    __swig_setmethods__["pull_front"] = _mmcBody.MmcBody_pull_front_set
    __swig_getmethods__["pull_front"] = _mmcBody.MmcBody_pull_front_get
    if _newclass:pull_front = _swig_property(_mmcBody.MmcBody_pull_front_get, _mmcBody.MmcBody_pull_front_set)
    __swig_setmethods__["pull_back"] = _mmcBody.MmcBody_pull_back_set
    __swig_getmethods__["pull_back"] = _mmcBody.MmcBody_pull_back_get
    if _newclass:pull_back = _swig_property(_mmcBody.MmcBody_pull_back_get, _mmcBody.MmcBody_pull_back_set)
    __swig_setmethods__["temp_vect"] = _mmcBody.MmcBody_temp_vect_set
    __swig_getmethods__["temp_vect"] = _mmcBody.MmcBody_temp_vect_get
    if _newclass:temp_vect = _swig_property(_mmcBody.MmcBody_temp_vect_get, _mmcBody.MmcBody_temp_vect_set)
    __swig_setmethods__["temp_vect_2"] = _mmcBody.MmcBody_temp_vect_2_set
    __swig_getmethods__["temp_vect_2"] = _mmcBody.MmcBody_temp_vect_2_get
    if _newclass:temp_vect_2 = _swig_property(_mmcBody.MmcBody_temp_vect_2_get, _mmcBody.MmcBody_temp_vect_2_set)
    __swig_setmethods__["visualization_data"] = _mmcBody.MmcBody_visualization_data_set
    __swig_getmethods__["visualization_data"] = _mmcBody.MmcBody_visualization_data_get
    if _newclass:visualization_data = _swig_property(_mmcBody.MmcBody_visualization_data_get, _mmcBody.MmcBody_visualization_data_set)
    __swig_setmethods__["leg_return_vect"] = _mmcBody.MmcBody_leg_return_vect_set
    __swig_getmethods__["leg_return_vect"] = _mmcBody.MmcBody_leg_return_vect_get
    if _newclass:leg_return_vect = _swig_property(_mmcBody.MmcBody_leg_return_vect_get, _mmcBody.MmcBody_leg_return_vect_set)
    __swig_setmethods__["damping"] = _mmcBody.MmcBody_damping_set
    __swig_getmethods__["damping"] = _mmcBody.MmcBody_damping_get
    if _newclass:damping = _swig_property(_mmcBody.MmcBody_damping_get, _mmcBody.MmcBody_damping_set)
    __swig_setmethods__["body_height_front"] = _mmcBody.MmcBody_body_height_front_set
    __swig_getmethods__["body_height_front"] = _mmcBody.MmcBody_body_height_front_get
    if _newclass:body_height_front = _swig_property(_mmcBody.MmcBody_body_height_front_get, _mmcBody.MmcBody_body_height_front_set)
    __swig_setmethods__["body_height_middle"] = _mmcBody.MmcBody_body_height_middle_set
    __swig_getmethods__["body_height_middle"] = _mmcBody.MmcBody_body_height_middle_get
    if _newclass:body_height_middle = _swig_property(_mmcBody.MmcBody_body_height_middle_get, _mmcBody.MmcBody_body_height_middle_set)
    __swig_setmethods__["body_height_hind"] = _mmcBody.MmcBody_body_height_hind_set
    __swig_getmethods__["body_height_hind"] = _mmcBody.MmcBody_body_height_hind_get
    if _newclass:body_height_hind = _swig_property(_mmcBody.MmcBody_body_height_hind_get, _mmcBody.MmcBody_body_height_hind_set)
    __swig_setmethods__["stance_width"] = _mmcBody.MmcBody_stance_width_set
    __swig_getmethods__["stance_width"] = _mmcBody.MmcBody_stance_width_get
    if _newclass:stance_width = _swig_property(_mmcBody.MmcBody_stance_width_get, _mmcBody.MmcBody_stance_width_set)
    __swig_setmethods__["stability_threshold"] = _mmcBody.MmcBody_stability_threshold_set
    __swig_getmethods__["stability_threshold"] = _mmcBody.MmcBody_stability_threshold_get
    if _newclass:stability_threshold = _swig_property(_mmcBody.MmcBody_stability_threshold_get, _mmcBody.MmcBody_stability_threshold_set)
    def get_segm_vectors_between_legs(self, *args) -> "void" : return _mmcBody.MmcBody_get_segm_vectors_between_legs(self, *args)
    def get_segm_vectors_between_front(self, *args) -> "void" : return _mmcBody.MmcBody_get_segm_vectors_between_front(self, *args)
    def lift_leg_from_ground(self, *args) -> "void" : return _mmcBody.MmcBody_lift_leg_from_ground(self, *args)
    def put_leg_on_ground(self, *args) -> "void" : return _mmcBody.MmcBody_put_leg_on_ground(self, *args)
    def get_ground_contact(self, *args) -> "bool" : return _mmcBody.MmcBody_get_ground_contact(self, *args)
    def compute_leg_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_leg_computations_and_integrate(self, *args)
    def compute_front_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_front_computations_and_integrate(self, *args)
    def compute_segment_leg_ant_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_segment_leg_ant_computations_and_integrate(self, *args)
    def compute_segment_leg_post_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_segment_leg_post_computations_and_integrate(self, *args)
    def compute_segm_post_ant_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_segm_post_ant_computations_and_integrate(self, *args)
    def compute_segm_diag_computations_and_integrate(self, *args) -> "void" : return _mmcBody.MmcBody_compute_segm_diag_computations_and_integrate(self, *args)
    def set_pull_front(self, *args) -> "void" : return _mmcBody.MmcBody_set_pull_front(self, *args)
    def set_pull_back(self, *args) -> "void" : return _mmcBody.MmcBody_set_pull_back(self, *args)
    def check_static_stability(self, *args) -> "double" : return _mmcBody.MmcBody_check_static_stability(self, *args)
    def mmc_iteration_step(self) -> "void" : return _mmcBody.MmcBody_mmc_iteration_step(self)
    def get_leg_triangle(self, *args) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >" : return _mmcBody.MmcBody_get_leg_triangle(self, *args)
    def get_leg_vector(self, *args) -> "std::vector< double,std::allocator< double > >" : return _mmcBody.MmcBody_get_leg_vector(self, *args)
MmcBody_swigregister = _mmcBody.MmcBody_swigregister
MmcBody_swigregister(MmcBody)

# This file is compatible with both classic and new-style classes.


