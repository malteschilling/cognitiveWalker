# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mmcLeg', [dirname(__file__)])
        except ImportError:
            import _mmcLeg
            return _mmcLeg
        if fp is not None:
            try:
                _mod = imp.load_module('_mmcLeg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mmcLeg = swig_import_helper()
    del swig_import_helper
else:
    import _mmcLeg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mmcLeg.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _mmcLeg.SwigPyIterator_value(self)
    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _mmcLeg.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _mmcLeg.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _mmcLeg.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _mmcLeg.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _mmcLeg.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _mmcLeg.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _mmcLeg.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _mmcLeg.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _mmcLeg.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _mmcLeg.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _mmcLeg.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _mmcLeg.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _mmcLeg.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _mmcLeg.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _mmcLeg.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _mmcLeg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _mmcLeg.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _mmcLeg.DoubleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _mmcLeg.DoubleVector___bool__(self)
    def __len__(self) -> "std::vector< double >::size_type" : return _mmcLeg.DoubleVector___len__(self)
    def pop(self) -> "std::vector< double >::value_type" : return _mmcLeg.DoubleVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< double,std::allocator< double > > *" : return _mmcLeg.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _mmcLeg.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _mmcLeg.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _mmcLeg.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< double >::value_type const &" : return _mmcLeg.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _mmcLeg.DoubleVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _mmcLeg.DoubleVector_append(self, *args)
    def empty(self) -> "bool" : return _mmcLeg.DoubleVector_empty(self)
    def size(self) -> "std::vector< double >::size_type" : return _mmcLeg.DoubleVector_size(self)
    def clear(self) -> "void" : return _mmcLeg.DoubleVector_clear(self)
    def swap(self, *args) -> "void" : return _mmcLeg.DoubleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< double >::allocator_type" : return _mmcLeg.DoubleVector_get_allocator(self)
    def begin(self) -> "std::vector< double >::iterator" : return _mmcLeg.DoubleVector_begin(self)
    def end(self) -> "std::vector< double >::iterator" : return _mmcLeg.DoubleVector_end(self)
    def rbegin(self) -> "std::vector< double >::reverse_iterator" : return _mmcLeg.DoubleVector_rbegin(self)
    def rend(self) -> "std::vector< double >::reverse_iterator" : return _mmcLeg.DoubleVector_rend(self)
    def pop_back(self) -> "void" : return _mmcLeg.DoubleVector_pop_back(self)
    def erase(self, *args) -> "std::vector< double >::iterator" : return _mmcLeg.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _mmcLeg.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _mmcLeg.DoubleVector_push_back(self, *args)
    def front(self) -> "std::vector< double >::value_type const &" : return _mmcLeg.DoubleVector_front(self)
    def back(self) -> "std::vector< double >::value_type const &" : return _mmcLeg.DoubleVector_back(self)
    def assign(self, *args) -> "void" : return _mmcLeg.DoubleVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _mmcLeg.DoubleVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _mmcLeg.DoubleVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _mmcLeg.DoubleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< double >::size_type" : return _mmcLeg.DoubleVector_capacity(self)
    __swig_destroy__ = _mmcLeg.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _mmcLeg.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class LEG_VARS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LEG_VARS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LEG_VARS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmcLeg.new_LEG_VARS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["alpha"] = _mmcLeg.LEG_VARS_alpha_set
    __swig_getmethods__["alpha"] = _mmcLeg.LEG_VARS_alpha_get
    if _newclass:alpha = _swig_property(_mmcLeg.LEG_VARS_alpha_get, _mmcLeg.LEG_VARS_alpha_set)
    __swig_setmethods__["beta"] = _mmcLeg.LEG_VARS_beta_set
    __swig_getmethods__["beta"] = _mmcLeg.LEG_VARS_beta_get
    if _newclass:beta = _swig_property(_mmcLeg.LEG_VARS_beta_get, _mmcLeg.LEG_VARS_beta_set)
    __swig_setmethods__["gamma"] = _mmcLeg.LEG_VARS_gamma_set
    __swig_getmethods__["gamma"] = _mmcLeg.LEG_VARS_gamma_get
    if _newclass:gamma = _swig_property(_mmcLeg.LEG_VARS_gamma_get, _mmcLeg.LEG_VARS_gamma_set)
    __swig_setmethods__["projection_length"] = _mmcLeg.LEG_VARS_projection_length_set
    __swig_getmethods__["projection_length"] = _mmcLeg.LEG_VARS_projection_length_get
    if _newclass:projection_length = _swig_property(_mmcLeg.LEG_VARS_projection_length_get, _mmcLeg.LEG_VARS_projection_length_set)
    __swig_setmethods__["target"] = _mmcLeg.LEG_VARS_target_set
    __swig_getmethods__["target"] = _mmcLeg.LEG_VARS_target_get
    if _newclass:target = _swig_property(_mmcLeg.LEG_VARS_target_get, _mmcLeg.LEG_VARS_target_set)
    __swig_setmethods__["betaDirectionFact"] = _mmcLeg.LEG_VARS_betaDirectionFact_set
    __swig_getmethods__["betaDirectionFact"] = _mmcLeg.LEG_VARS_betaDirectionFact_get
    if _newclass:betaDirectionFact = _swig_property(_mmcLeg.LEG_VARS_betaDirectionFact_get, _mmcLeg.LEG_VARS_betaDirectionFact_set)
    __swig_destroy__ = _mmcLeg.delete_LEG_VARS
    __del__ = lambda self : None;
LEG_VARS_swigregister = _mmcLeg.LEG_VARS_swigregister
LEG_VARS_swigregister(LEG_VARS)

class MmcLeg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MmcLeg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MmcLeg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mmcLeg.new_MmcLeg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mmcLeg.delete_MmcLeg
    __del__ = lambda self : None;
    __swig_setmethods__["leg"] = _mmcLeg.MmcLeg_leg_set
    __swig_getmethods__["leg"] = _mmcLeg.MmcLeg_leg_get
    if _newclass:leg = _swig_property(_mmcLeg.MmcLeg_leg_get, _mmcLeg.MmcLeg_leg_set)
    __swig_setmethods__["temp_leg"] = _mmcLeg.MmcLeg_temp_leg_set
    __swig_getmethods__["temp_leg"] = _mmcLeg.MmcLeg_temp_leg_get
    if _newclass:temp_leg = _swig_property(_mmcLeg.MmcLeg_temp_leg_get, _mmcLeg.MmcLeg_temp_leg_set)
    __swig_setmethods__["segm_length"] = _mmcLeg.MmcLeg_segm_length_set
    __swig_getmethods__["segm_length"] = _mmcLeg.MmcLeg_segm_length_get
    if _newclass:segm_length = _swig_property(_mmcLeg.MmcLeg_segm_length_get, _mmcLeg.MmcLeg_segm_length_set)
    __swig_setmethods__["damping"] = _mmcLeg.MmcLeg_damping_set
    __swig_getmethods__["damping"] = _mmcLeg.MmcLeg_damping_get
    if _newclass:damping = _swig_property(_mmcLeg.MmcLeg_damping_get, _mmcLeg.MmcLeg_damping_set)
    __swig_setmethods__["calc_joint_value"] = _mmcLeg.MmcLeg_calc_joint_value_set
    __swig_getmethods__["calc_joint_value"] = _mmcLeg.MmcLeg_calc_joint_value_get
    if _newclass:calc_joint_value = _swig_property(_mmcLeg.MmcLeg_calc_joint_value_get, _mmcLeg.MmcLeg_calc_joint_value_set)
    __swig_setmethods__["number_computations"] = _mmcLeg.MmcLeg_number_computations_set
    __swig_getmethods__["number_computations"] = _mmcLeg.MmcLeg_number_computations_get
    if _newclass:number_computations = _swig_property(_mmcLeg.MmcLeg_number_computations_get, _mmcLeg.MmcLeg_number_computations_set)
    __swig_setmethods__["iteration_step"] = _mmcLeg.MmcLeg_iteration_step_set
    __swig_getmethods__["iteration_step"] = _mmcLeg.MmcLeg_iteration_step_get
    if _newclass:iteration_step = _swig_property(_mmcLeg.MmcLeg_iteration_step_get, _mmcLeg.MmcLeg_iteration_step_set)
    __swig_setmethods__["return_vect"] = _mmcLeg.MmcLeg_return_vect_set
    __swig_getmethods__["return_vect"] = _mmcLeg.MmcLeg_return_vect_get
    if _newclass:return_vect = _swig_property(_mmcLeg.MmcLeg_return_vect_get, _mmcLeg.MmcLeg_return_vect_set)
    def get_joint_angles(self) -> "std::vector< double,std::allocator< double > >" : return _mmcLeg.MmcLeg_get_joint_angles(self)
    def set_joint_angles(self, *args) -> "void" : return _mmcLeg.MmcLeg_set_joint_angles(self, *args)
    def compute_joints_and_integrate(self) -> "void" : return _mmcLeg.MmcLeg_compute_joints_and_integrate(self)
    def compute_target(self) -> "void" : return _mmcLeg.MmcLeg_compute_target(self)
    def compute_projection_length(self) -> "void" : return _mmcLeg.MmcLeg_compute_projection_length(self)
    def mmc_kinematic_iteration_step(self) -> "void" : return _mmcLeg.MmcLeg_mmc_kinematic_iteration_step(self)
    def compute_inverse_kinematics(self, *args) -> "std::vector< double,std::allocator< double > >" : return _mmcLeg.MmcLeg_compute_inverse_kinematics(self, *args)
MmcLeg_swigregister = _mmcLeg.MmcLeg_swigregister
MmcLeg_swigregister(MmcLeg)

# This file is compatible with both classic and new-style classes.


